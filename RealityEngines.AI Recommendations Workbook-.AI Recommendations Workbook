{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RealityEngines.AI Recommendations Workbook","provenance":[{"file_id":"1W2DukSRrOl7i4sYkq-l3Ic9R0hjOGAmR","timestamp":1591659718500},{"file_id":"1WSIqD63FmXNOz8Y8CPlHHeIyKUdPzDU4","timestamp":1585171138525},{"file_id":"1BXlgFONm-HMC-I22iV7jexiodz80EwyT","timestamp":1585154212876},{"file_id":"1QO-Yi4joBea9w5tHeR_IrsXeHGMlogZE","timestamp":1582076554192},{"file_id":"1mMYhWPyCTeCHqEEdSMEAOUQVqRPMyoqj","timestamp":1582054030134}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"eNZ-Lpfz14kJ"},"source":["## Welcome to the RealityEngines.AI Recommendations Workbook!\n","This workbook provides you with a hands on environment to build a recommendations model using the RealityEngines.AI Python Client Library.\n","\n","We'll be using the [Movielens](https://movielens.org/) Dataset which contains information about user interactions with movies to build a movie recommendation engine.\n","\n","\n","For questions or help, visit the chat in the [YouTube Stream Recording](https://www.youtube.com/watch?v=G4A0jxdaB4o)\n","## Prerequisites\n","\n","- [Sign up](https://realityengines.ai/app/signup?signupToken=RECOMMENDATIONS) for a RealityEngines.AI Account\n","- Once your account is created, navigate to the [API Keys Dashboard](https://realityengines.ai/app/profile/apikey) and generate an API key to authenticate your python client\n","\n","\n","---\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"mcByRVnL14kJ"},"source":["1. Install the RealityEngines.AI library with the command below\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"0eokAWmW14kK","colab":{}},"source":["!pip install realityengines "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0D9QEgVs6Ni0","colab_type":"text"},"source":["We'll also import pandas and pprint tools for visualization in this workbook."]},{"cell_type":"code","metadata":{"id":"yGlFXmPI6Mjp","colab_type":"code","colab":{}},"source":["import pandas as pd # A tool we'll use to download and preview CSV files\n","import pprint # A tool to pretty print dictionary outputs\n","pp = pprint.PrettyPrinter(indent=2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"SsZDibCT14kN"},"source":["2. Add your RealityEngines.AI [API Key](https://realityengines.ai/app/profile/apikey)."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"p_dHDf7r14kO","colab":{}},"source":["#@title RealityEngines.AI API Key\n","\n","api_key = ''  #@param {type: \"string\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"HVfSIx_m14kQ"},"source":["3. Import the RealityEngines.AI library and instatiate a client."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ZKijYZRV14kR","colab":{}},"source":["from realityengines.client import ReClient\n","client = ReClient(api_key)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"E_VFUufy14kV"},"source":["## 1. Create a Project\n","\n","RealityEngines.AI Projects are a container which contains Datasets and trained Models. By specifying a business **Use Case**, RealityEngines.AI tailors the deep learning algorithms to produce the best performing model possible for your data.\n","\n","We'll call the `list_use_cases` method to retrieve a list of the available Use Cases currently available on the RealityEngines.AI platform."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"R6CO_-KR14kW","colab":{}},"source":["client.list_use_cases()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"jFr25rTU14kZ"},"source":["For this workshop, we're going to create a Personalized Recommendation model using the Movielens dataset. Given a user, this model will predict the best movies to recommend next.\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"2sKXJuy814ka","colab":{}},"source":["#@title RealityEngines.AI Use Case\n","\n","use_case = 'USER_RECOMMENDATIONS'  #@param {type: \"string\"}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zFntyroooyWx","colab_type":"text"},"source":["By calling the `describe_use_case_requirements` method we can view what datasets are required for this use_case."]},{"cell_type":"code","metadata":{"id":"GR087tnmoqnv","colab_type":"code","colab":{}},"source":["for requirement in client.describe_use_case_requirements(use_case):\n","  pp.pprint(requirement.to_dict())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZWuo8tDGpB1A","colab_type":"text"},"source":["Finally, let's create the project:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Hu7xtDVT14kc","colab":{}},"source":["movies_project = client.create_project(name='Movie Recommendations', use_case=use_case)\n","movies_project.to_dict()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"tnze-f8k14ke"},"source":["## 2. Add Datasets to your Project\n","\n","RealityEngines.AI can read datasets directly from `AWS S3` or `Goolge Cloud Storage` buckets, otherwise you can also directly upload and store your datasets with RealityEngines.AI. For this workshop, we will directly upload the datasets from the workbook.\n","\n","We are using three seperate datasets for this workshop. We'll tell RealityEngines.AI how each dataset should be used when creating the dataset by tagging each with a special RealityEngines.AI **Dataset Type**.\n","- [Movies Dataset](https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/movies_metadata.csv) (**CATALOG_ATTRIBUTES**): \n","This dataset contains information about each movie in the catalog. \n","\n","- [Users Dataset](https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/users_metadata.csv) (**USER_ATTRIBUTES**):\n","This dataset contains information about each user.\n","- [User-Movies Ratings Dataset](https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/user_movie_ratings.csv) (**USER_ITEM_INTERACTIONS**):\n","This dataset contains all of the user - movie ratings."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"cARnkcG_14kh"},"source":["### Upload the datasets to RealityEngines.AI\n","\n","First we need to get the dataset files onto the workbook machine. We'll use Pandas to read the files directly into a csv file, then preview each of the files."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"JbzfPGsO14kj","colab":{}},"source":["movies_data = pd.read_csv('https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/movies_metadata.csv')\n","movies_data.to_csv('movies_data.csv', index=False)\n","movies_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hs5GwDPosiR0","colab_type":"code","colab":{}},"source":["users_data = pd.read_csv('https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/users_metadata.csv')\n","users_data.to_csv('users_data.csv', index=False)\n","users_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DGQjkfzBsh1a","colab_type":"code","colab":{}},"source":["user_movie_ratings_data = pd.read_csv('https://s3.amazonaws.com/realityengines.exampledatasets/user_recommendations/user_movie_ratings.csv')\n","user_movie_ratings_data.to_csv('user_movie_ratings.csv', index=False)\n","user_movie_ratings_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"s83k6YpA14kl","colab":{}},"source":["# Upload the datasets to RealityEngines.AI\n","movies_upload = client.create_dataset_from_local_file('Movies', \n","                                                      project_id=movies_project.project_id, \n","                                                      dataset_type='CATALOG_ATTRIBUTES')\n","with open('movies_data.csv') as file:\n","   movies_dataset = movies_upload.upload_file(file)\n","   print(\"Movies Dataset Uploaded\")\n","\n","users_upload = client.create_dataset_from_local_file('Users', \n","                                                     project_id=movies_project.project_id, \n","                                                     dataset_type='USER_ATTRIBUTES')\n","with open('users_data.csv') as file:\n","   users_dataset = users_upload.upload_file(file)\n","   print(\"Users Dataset Uploaded\")\n","\n","\n","user_movie_ratings_upload = client.create_dataset_from_local_file('User Movie Ratings', \n","                                                                  project_id=movies_project.project_id, \n","                                                                  dataset_type='USER_ITEM_INTERACTIONS')\n","with open('user_movie_ratings.csv') as file:\n","   user_movie_ratings_dataset = user_movie_ratings_upload.upload_file(file)\n","   print(\"User Movie Ratings Dataset Uploaded\")\n","\n","datasets = [movies_dataset, users_dataset, user_movie_ratings_dataset]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"59ZEraPS14kn"},"source":["### Check Dataset Processing Status"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Vr8RUg-o14kn"},"source":["Once the file is uploaded, RealityEngines.AI starts inspecting and featurizing the datasets to automatically detect the schema. The following command will wait until RealityEngines.AI is done inspecting the files, then print the schema that RealityEngines.AI detected."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"gVRuyBMr14ko","colab":{}},"source":["for dataset in datasets:\n","    dataset.wait_for_inspection()\n","    print(f'{dataset.name} Schema:')\n","    pp.pprint(client.get_schema(movies_project.project_id, dataset.dataset_id))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"7BF5m0gy14kv"},"source":["## 3. Train a Model"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"a4InLGA414kw"},"source":["Now that we've uploaded the datasets, we're almost ready to train a model! To be sure that our project is ready to go, let's call `project.validate` to confirm that all the project requirements have been met."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"YZ7c3Iso14kx","colab":{}},"source":["movies_project.validate()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"cC9qttaa14k1","colab":{}},"source":["movies_model = movies_project.train_model()\n","movies_model.to_dict()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"avx7fXJt14k3"},"source":["After we start training the model, we can call this blocking call that continually checks the status of the model until it is trained and evaluated."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"h7sZ8IvU14k5","colab":{}},"source":["movies_model.wait_for_evaluation()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"KsRij9oS14k7"},"source":["### Evaluate your Model Metrics\n","\n","After your model is done training you can inspect the model's quality by reviewing the model's metrics.\n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Hv9vSEeQ14k8","colab":{}},"source":["pp.pprint(movies_model.get_metrics())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"RCoF8Gfb14k-"},"source":["To get a better understanding on what these metrics mean:\n","\n","\n","- Normalized Discounted Cumulative Gain (**ndcg**):\n","\n","  Normalized Discounted Cumulative Gain calculates the relevancy of the predicted ranking of items compared to the ranking of items in the test set. The goal is to reach a NDCG value as close to 1 as possible.\n","\n","- Item Coverage (**coverage**):\n","\n","  Item Coverage measures the percentage of your item catalog that is recommended to all users in the test set. \n","\n","- Precision (**precision**):\n","\n","  Precision calculates the percent of items from the top n ranked items in the test set, in the predicted top n, for every user. The goal is to reach a value of 1 for the precision value.\n","\n","- Recall (**recall**):\n","\n","  Recall calculates the percent of items from the predicted top n ranked items, in the top n ranked items in the test set, for every user. The goal is to reach a value of 1 for the precision value.\n","\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"V8wuzn0c14k_"},"source":["## 4. Deploy Model"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"mmdrN12814k_"},"source":["After the model has been trained, we need to deploy the model to be able to start making predictions. Deploying a model will reserve cloud resources to host the model for realtime predictions."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"bwWSgcPk14lA","colab":{}},"source":["recommendations_deployment = movies_model.create_deployment('Movie Recommendations')\n","recommendations_deployment.wait_for_deployment()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ZSB3U_Mu14lC"},"source":["After the model is deployed, we need to create a deployment token for authenticating prediction requests. This token is only authorized to predict on deployments in this project, so it's safe to embed this token inside of a user-facing application or website. \n"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"dmluSRu014lD","colab":{}},"source":["movies_deployment_token = movies_project.create_deployment_token()['deploymentToken']\n","movies_deployment_token"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"6UM14CbmbBhG"},"source":["## 5. Predict\n","\n","For this workshop we have deployed a model ahead of time; you can see what the output of the predictions will look like using `get_recommendations`. We are instantiating a new Client to show that the API call is only using the deployment_token for authentication."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"l5rz2kMWbBhJ","colab":{}},"source":["predictions = ReClient().get_recommendations(deployment_token=\"1285b94e984849b6bcd7c3dc77a5edfe\", \n","                              deployment_id=\"d0cf742b8\", \n","                              query_data={\"user_id\":\"1\"})\n","predictions"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SD4YJS18hw9b","colab_type":"text"},"source":["We can then use the list of movie IDs to show the user predictions. \n","\n","To get a human readable list of predictions, we can join the IDs from our original movies dataset."]},{"cell_type":"code","metadata":{"id":"swa-CXo8h_zQ","colab_type":"code","colab":{}},"source":["movies_data.set_index(\"movie_id\", inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TT3YHEaNiAfN","colab_type":"code","colab":{}},"source":["for prediction in predictions:\n","    prediction.update(movies_data.loc[int(prediction['movie_id'])])\n","predictions"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"wZxQclZ614lF"},"source":["Once your deployment is Active and you have a deployment token for this project, you can call the prediction command below.\n","\n","This command will return a dictionary containing a list of 50 movies to recommend to the user."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"jOoZKmBubBhN","colab":{}},"source":["client.get_recommendations(deployment_token=movies_deployment_token, \n","                              deployment_id=recommendations_deployment.deployment_id, \n","                              query_data={\"user_id\":\"1\"})"],"execution_count":0,"outputs":[]}]}